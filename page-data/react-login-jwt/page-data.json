{"componentChunkName":"component---src-pages-blog-post-js","path":"/react-login-jwt/","result":{"data":{"site":{"siteMetadata":{"title":"klloo"}},"markdownRemark":{"id":"7cef6f34-6666-5d78-8f66-298d12a847c7","excerpt":"…","html":"<p>지난 번에 <a href=\"https://klloo.github.io/session-jwt/\">세션 기반 인증과 토큰 기반 인증</a>에 대해 글을 썼었는데요. 그 이후로 로그인을 구현한 과정에 대해서는 포스팅하지 않았어서 ... 이제라도 포스팅 해보려 합니다!</p>\n<p>일단 저번글의 요약 내용은 아래와 같습니다.</p>\n<p><code class=\"language-text\">Access Token</code>: 쿠키에 저장할 경우 CSRF 공격에 취약하고, localStorage에 저장할 경우 자바스크립트로 접근이 가능하기 때문에 XSS 취약점이 있을 경우 탈취 위험이 있다. 웹 애플리케이션 내의 로컬 변수에 저장하는 것이 최선이다.</p>\n<p><code class=\"language-text\">Refresh Token</code>: Access Token과 취약점은 같다. 하지만 Refresh Token의 용도는 Access Token의 재발급을 위한 것으로 용도가 한정되어 있으며, CSRF 공격으로는 발급받은 엑세스 토큰을 수령할 방법이 없다. 따라서 httpOnly 쿠키로 저장하는 것이 최선이다.</p>\n<p>이 정도 였습니다. 이제 공부를 해봤으니... 구현 할 일만 남았습니다.</p>\n<p>일단 제가 로그인 방식을 구현하기 전에 고려할 부분은 크게 두 가지가 있었습니다.</p>\n<ol>\n<li>Access Token과 Refresh Token의 저장 위치</li>\n</ol>\n<ul>\n<li>Refresh Token: httpOnly 쿠키</li>\n<li>Access Token: localStorage vs 로컬 변수</li>\n</ul>\n<ol start=\"2\">\n<li>Access Token의 재발급 시점</li>\n</ol>\n<ul>\n<li>만료되기 전에 자동으로 재발급(Silent Refresh)</li>\n<li>요청을 일단 보낸 다음, 해당 토큰이 만료되었다는 응답을 받은 시점에 토큰 재발급</li>\n</ul>\n<p>먼저 1번 사항을 확인해봤을때 Refresh Token은 의심의 여지 없이 httpOnly 쿠키로 저장하는 것이 최선인 것 같아 백엔드 개발자분과 그렇게 저장하기로 협의를 하였습니다.</p>\n<p>하지만 Access Token의 경우에는 고민의 여지가 있었습니다. 보안의 측면에서만 본다면 로컬 변수에 저장하는 것이 가장 최선이겠지만 이럴 경우 새로고침 하거나 새 창에서 애플리케이션에 접속했을 때 토큰을 유지할 수가 없습니다. 그래서 새로고침 시 마다 토큰을 재발급 해야하는데 이럴 경우 재발급 요청이 잦아져 네트워크와 서버 부하의 측면에서 단점이 생기게 됩니다.</p>\n<p>이 외의 다른 방식을 고려해본다면 쿠키와 localStorage가 있는데, 쿠키의 경우 요청 자체에 포함된 정보이므로 CSRF의 위험이 있고, localStorage경우에는 XSS 취약점이 존재할 경우 토큰 탈취의 위험이 있습니다. 그래서 이 둘 중에는 localStorage가 나은 것 같았습니다.</p>\n<p>이렇게 되니 결론은 localStorage vs 로컬 변수 였는데요. 저는 <strong>localStorage에 저장하여 매 요청마다 헤더에 Access Token을 전달하는 방식</strong>을 선택했습니다. 새로고침을 할 때 마다 재발급 요청을 보내는 것이 비효율적이라고 생각했고, 그렇다고 로컬 변수에 저장하는 것이 100% 안전한 것도 아니고 XSS 취약점은 어차피 고려를 해야할 부분이기 때문에 조금 더 효율적이고 쉽게 개발할 수 있는 방식을 선택하게 되었습니다. <br/>\n또한 Access Token은 탈취될 경우를 고려하여 만료 시간을 짧게 설정해두기 때문에 웬만해서는 큰 문제가 생기지 않을 것 같다고 판단하였습니다.</p>\n<p>다음 2번 사항의 고려사항은 아래와 같았습니다.</p>\n<ol>\n<li>Silent Refresh</li>\n</ol>\n<ul>\n<li>일정한 시간 간격에 따라 토큰이 갱신되므로 항상 토큰이 유효한 상태를 유지할 수 있지만 사용하지 않는 동안에도 주기적으로 토큰이 갱신되므로 서버 부하가 발생할 수 있습니다.</li>\n</ul>\n<ol start=\"2\">\n<li>401 에러 시 Refresh:</li>\n</ol>\n<ul>\n<li>토큰이 필요한 시점에서만 갱신되므로 서버 부하를 감소시킬 수 있지만 토큰이 만료되는 시점에는 <strong>요청 -> 401 응답 -> refresh 요청 -> 새 토큰으로 재요청</strong>의 과정을 거쳐야하기 때문에 요청이 느려지고 사용자 경험이 떨어질 수 있다는 단점이 있습니다.</li>\n</ul>\n<p>저는 2번 방법을 선택하여 구현을 했습니다. axios의 interceptors를 사용하면 한 곳에서 로직을 처리할 수 있기도 하고, 토큰이 필요한 시점에만 갱신해주는 것이 더 효율적이라고 생각했기 때문입니다. 하지만 다시 생각할수록 사용자 경험이 더 중요한 것 같았지만... 이미 구현을 마친 상태였고 네트워크 요청 시간을 확인했을 때 100ms 정도로 제 기준 크게 체감하지 못할만한 차이라고 생각하여 개발 편의성을 선택해버렸습니다~...</p>\n<p>구구절절 말이 길어졌지만 ... 아무튼 결론은</p>\n<ul>\n<li>Access Token은 localStorage에 저장하여 인증이 필요한 모든 요청의 헤더에 전달해준다.</li>\n<li>Refresh Token은 httpOnly 쿠키로 서버에서 설정하여 보내준다.</li>\n<li>요청을 보내보고 401 에러가 발생한다면, Access Token을 재발급하여 사용한다.</li>\n</ul>\n<p>이렇게 구현을 하기로 했습니다.</p>\n<h2>구현</h2>\n<h3>Access Token 저장 및 전달</h3>\n<p>먼저 로그인을 하게되면 응답으로 Access Token을 받게 되는데 이 토큰을 localStorage에 저장해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">requestLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> id<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> accessToken <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 토큰 저장</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>accessToken<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'accessToken'</span><span class=\"token punctuation\">,</span> accessToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Access Token을 요청의 헤더에 담아서 전달하기 위해서는 axios interceptors를 사용했습니다. axios interceptors는 axios에서 제공하는 기능으로 axios로 전달되는 요청과 응답을 가로채서 API 요청 전후로 필요한 공통된 로직을 처리를 할 수 있도록 해줍니다.</p>\n<p>바로 코드를 살펴보자면</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// axios 인스턴스 생성</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n <span class=\"token literal-property property\">baseURL</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 요청 인터셉터</span>\ninstance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 헤더에 엑세스 토큰 담기</span>\n  <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">accessToken</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'accessToken'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>accessToken<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>Authorization <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>accessToken<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> instance<span class=\"token punctuation\">;</span></code></pre></div>\n<p>먼저 axios 인스턴스를 생성하고 interceptors를 설정해줍니다. 해당 interceptor에서는 요청을 보내기 전에 localStorage에서 Access Token을 꺼내 헤더에 해당 토큰을 담아주는 코드를 작성해줬습니다.</p>\n<p>이렇게하고 axios 요청이 필요한 부분에서 해당 instance를 import해서 사용해주면 요청 헤더에 토큰을 전달할 수 있게 됩니다!</p>\n<h3>Access Token 재발급</h3>\n<p>응답 interceptors를 사용하여 토큰 만료시 토큰을 재발급하는 부분입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> refresh <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./auth'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REFRESH_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">'...'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">baseURL</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// access token 재발급</span>\n<span class=\"token keyword\">const</span> getRefreshToken <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>string <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> accessToken <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token operator\">?.</span>accessToken<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> accessToken<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 로그아웃 처리</span>\n    <span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 요청 인터셉터</span>\ninstance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 헤더에 엑세스 토큰 담기</span>\n    <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">accessToken</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'accessToken'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>accessToken<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>Authorization <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>accessToken<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 응답 인터셉터</span>\ninstance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> config<span class=\"token punctuation\">,</span> response <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> error<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//  401에러가 아니거나 재요청이거나 refresh 요청인 경우 그냥 에러 발생</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token number\">401</span> <span class=\"token operator\">||</span> config<span class=\"token punctuation\">.</span>sent <span class=\"token operator\">||</span> config<span class=\"token punctuation\">.</span>url <span class=\"token operator\">===</span> <span class=\"token constant\">REFRESH_URL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 아닌 경우 토큰 갱신</span>\n    config<span class=\"token punctuation\">.</span>sent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 무한 재요청 방지</span>\n    <span class=\"token keyword\">const</span> accessToken <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getRefreshToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>accessToken<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'accessToken'</span><span class=\"token punctuation\">,</span> accessToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>Authorization <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>accessToken<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 재요청</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> instance<span class=\"token punctuation\">;</span></code></pre></div>\n<p>먼저 401에러를 응답으로 받았다면 Access Token을 재발급 받아서 해당 토큰으로 다시 요청을 보내줍니다.\n만약 401 에러가 아니거나, 이미 보낸 요청인 경우 혹은 Refresh 요청인 경우에 발생한 에러라면 그냥 에러를 발생시켜주면 됩니다. 만약 Refresh요청 중에 에러가 발생했다면 토큰 재발급이 제대로 안되었다는 의미로... 로그아웃 처리를 해줬습니다!</p>\n<h3>로그아웃 처리</h3>\n<p>로그아웃을 처리하려면 ... 그냥 토큰을 없애버리고 사용하지 않으면 됩니다! 토큰으로 모든 인증과 인가의 과정이 이루어지기 때문에...</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'accessToken'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그래서 그냥 이렇게 토큰을 지워버리는 것으로 로그아웃 처리를 해줬고, localStorage에 토큰이 저장되어있는지 여부로 로그인 여부를 판단해줬습니다.</p>\n<p>이렇게 구구절절 로그인 구현 과정이 끝났습니다. 사실 코드 자체나 로직에 대해 크게 어려운 부분은 없었지만... 중요한 기능이니 만큼 효율이나 보안과 관련된 여러가지 고려사항이 많았어서 구글링도 많이 해보고 생각도 많이 해보고 구현을 했는데요... 인터넷에서 마냥 베껴온 코드가 아니라 나름의 생각끝에 구현한 기능이라 뿌듯하기도 했습니다~</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EA%B5%AC%ED%98%84\">구현</a></p>\n<ul>\n<li><a href=\"#access-token-%EC%A0%80%EC%9E%A5-%EB%B0%8F-%EC%A0%84%EB%8B%AC\">Access Token 저장 및 전달</a></li>\n<li><a href=\"#access-token-%EC%9E%AC%EB%B0%9C%EA%B8%89\">Access Token 재발급</a></li>\n<li><a href=\"#%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83-%EC%B2%98%EB%A6%AC\">로그아웃 처리</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"리액트에서 jwt 기반 로그인 구현하기","date":"January 05, 2024","description":"리액트에서 jwt 기반 로그인을 구현해보았습니다.","category":"FE","icon":"🔑","tags":["Frontend","JWT","Login","React","Axios"]}},"previous":{"fields":{"slug":"/make-portfolio/"},"frontmatter":{"title":"바닐라 JS로 포트폴리오 만들기"}},"next":{"fields":{"slug":"/memoization-api/"},"frontmatter":{"title":"API 중복호출 해결하기"}}},"pageContext":{"id":"7cef6f34-6666-5d78-8f66-298d12a847c7","previousPostId":"a4981fdf-72f7-5eac-8c57-0e2d9bd533ee","nextPostId":"1c8caf3c-380e-518f-b680-e79b1a7068d4"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}