{"componentChunkName":"component---src-pages-blog-post-js","path":"/swr/","result":{"data":{"site":{"siteMetadata":{"title":"klloo"}},"markdownRemark":{"id":"44a4ab89-ff59-57d5-a414-aed307e86eda","excerpt":"SWR이란 SWR은 데이터 가져오기를 위한 React Hooks입니다. 공식문서에서는 \"SWR은 먼저 캐시(stale)로부터 데이터를 반환한 후, fetch 요청(revalidate…","html":"<h3>SWR이란</h3>\n<p>SWR은 데이터 가져오기를 위한 React Hooks입니다. 공식문서에서는 \"SWR은 먼저 캐시(stale)로부터 데이터를 반환한 후, fetch 요청(revalidate)을 하고, 최종적으로 최신화된 데이터를 가져오는 전략입니다.\" 라고 소개하고 있습니다.</p>\n<p>저는 그냥 주로 서버의 데이터를 가져와서 상태를 관리하는데 사용하는 라이브러리라고 이해를 했습니다.</p>\n<p>예를들어 /api 경로로 데이터를 요청해와서, 해당 데이터를 렌더링해야하는 상황에서 SWR을 사용하지 않는다면</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">axios\n <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api'</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> resData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>resData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이런식으로 데이터를 직접 요청해서 가져온 다음, 직접 렌더링할 데이터에 할당해줘야 합니다.\n반면에 SWR을 사용하면</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useSWR</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api'</span><span class=\"token punctuation\">,</span> fetcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 간단한 형식으로 리액트 훅을 사용하여 서버의 데이터를 가져올 수 있게됩니다.</p>\n<h3>SWR 사용해보기</h3>\n<p>기본 형태는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> isLoading<span class=\"token punctuation\">,</span> isValidating<span class=\"token punctuation\">,</span> mutate <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useSWR</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> fetcher<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>파라미터</strong></p>\n<ul>\n<li><code class=\"language-text\">key</code>: 요청을 위한 고유한 키 문자열(또는 함수 / 배열 / null) (상세내용), (고급 사용법)</li>\n<li><code class=\"language-text\">fetcher</code>: (옵션) 데이터를 가져오기 위한 함수를 반환하는 Promise (상세내용)</li>\n<li><code class=\"language-text\">options</code>: (옵션) SWR hook을 위한 옵션 객체</li>\n</ul>\n<p><strong>반환 값</strong></p>\n<ul>\n<li><code class=\"language-text\">data</code>: fetcher가 이행한 주어진 키에 대한 데이터(로드되지 않았다면 undefined)</li>\n<li><code class=\"language-text\">error</code>: fetcher가 던진 에러(또는 undefined)</li>\n<li><code class=\"language-text\">isLoading</code>: 진행 중인 요청이 있고 \"로드된 데이터\"가 없는 경우. 폴백 데이터와 이전 데이터는 \"로드된 데이터\"로 간주하지 않습니다.</li>\n<li><code class=\"language-text\">isValidating</code>: 요청이나 갱신 로딩의 여부</li>\n<li><code class=\"language-text\">mutate(data?, options?)</code>: 캐시 된 데이터를 뮤테이트하기 위한 함수</li>\n</ul>\n<p>사실 SWR에 관한 설명은 다른 블로그나 공식문서에 워낙 잘 정리된 글이 많기 때문에 저는 여기까지만 소개하고 제가 프로젝트에 적용하고 사용해보며 느낀점을 위주로 글을 작성해보려고 합니다!</p>\n<p>먼저 기본적으로 SWR은 전역 캐시를 사용해 모든 컴포넌트 사이에 데이터를 저장하고 공유하고 있어, 전역으로 상태를 관리하는 것이 쉬워졌습니다.</p>\n<p>전역으로 상태 관리가 필요한 대표적인 데이터의 예시로는 로그인한 사용자의 정보가 있을 것 같습니다.\n만약 SWR을 사용하지 않는다면 redux와 같은 상태 관리 라이브러리를 사용하면서 로그인한 사용자 정보 받아오기 -> 해당 정보를 redux에 저장 이런 방식을 통해 해당 데이터를 전역적으로 관리할 수 있습니다. 이 때 만약 사용자의 정보가 변경된다면 데이터를 다시 로드해서 redux에 또 다시 담아줘야 합니다!!</p>\n<p>하지만 SWR을 사용한다면</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useSWR</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span> fetcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>따로 데이터를 저장해두는 과정 없이 사용자 정보가 필요한 컴포넌트에서 이렇게 바로 서버에서 해당 데이터를 가져와서 사용할 수 있습니다.</p>\n<p>그리고 만약에 useSWR로 데이터를 가져와서 랜더링해주는 Component라는 이름의 컴포넌트가 있다고 할 때</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>Component <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>Component <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>Component <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>Component <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 Component를 중복으로 선언해도 매번 요청을 보내지않고 동일한 SWR키를 가지고 있다면 해당 요청이 자동으로 중복 제거, 캐시, 공유되므로, 단 한 번의 요청만 전송되어 불필요한 네트워크 요청을 걱정하지 않아도 됩니다!</p>\n<p>그리고 이제 사용자 포커스나, 네트워크 재연결 시에 자동으로 데이터를 갱신해주기도 합니다. 브라우저 탭을 전환할 경우 등이 있을 것 같습니다.</p>\n<p>아무튼 SWR을 사용해보니 이렇게 필요한 시점에 데이터를 자동으로 갱신해주고, 효율적인 요청을 통해 서버 데이터를 전역에서 관리할 수 있으면서도 코드가 많이 간결해진 점이 좋았습니다. 그리고 <a href=\"https://swr.vercel.app/ko\">공식문서</a>가 굉장히 잘되어 있는 점도 좋았습니다!!</p>\n<h3>SWR vs React Query</h3>\n<p>SWR과 비교대상이 되는 라이브러리로는 React Query가 자주 등장합니다. 두 라이브러리에 대한 비교글도 잘 정리된 글이 상당히 많았습니다.</p>\n<p>여러가지 글을 읽어본 결과 기본적으로 SWR이 제공하는 기능은 React Query에서도 모두 제공되고 있는 것 같았고 보통 React Query가 더 많이 사용되고 있었습니다. 두 라이브러리의 차이점을 한 줄로 요약해보자면 \"SWR이 좀 더 가볍고 코드가 간결하지만 React Query가 좀 더 고도화된 기능을 제공하고 있다.\"라고 할 수 있을 것 같습니다.</p>\n<p>저는 상태 관리와 관련된 다양한 기능이 그다지 필요하지 않았기 때문에 좀 더 가볍고 간결한 코드로 사용할 수 있는 SWR을 먼저 사용해보게 되었습니다.</p>\n<p>두 라이브러리에 대해 사실 아직 이해를 못한 부분도 많고, 아직 활용하지 못한 기능이나(React Qurey는 아직 사용해보지도 않았습니다ㅎ..) 체감하지 못한 장단점도 많아서 밀도있게 정리해보진 못했지만 이런 기능을 제공하는 라이브러리를 사용해보니 편하다! 라고는 확실히 말할 수 있을 것 같습니다. 부족한 부분은 좀 더 사용해보며 공부하고 정리해보도록 하겠습니다.</p>\n<h4>읽어본 글들 중에 도움이 됐던 글들</h4>\n<p><a href=\"https://velog.io/@soryeongk/SWRBasic#1-swr-%EB%8B%88-%EB%AD%94%EB%8D%B0\">SWR 더 깊이 톺아보기</a> <br/>\n<a href=\"https://tech.madup.com/react-query-vs-swr/\">REACT QUERY VS SWR</a> <br/>\n<a href=\"https://fe-developers.kakaoent.com/2022/220224-data-fetching-libs/\">React에서 서버 데이터를 최신으로 관리하기(React Query, SWR)</a> <br/>\n<a href=\"https://yoonhaemin.com/tag/technical-thinking/react-query-vs-swr/\">React-Query vs SWR</a> <br/></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#swr%EC%9D%B4%EB%9E%80\">SWR이란</a></p>\n</li>\n<li>\n<p><a href=\"#swr-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\">SWR 사용해보기</a></p>\n</li>\n<li>\n<p><a href=\"#swr-vs-react-query\">SWR vs React Query</a></p>\n<ul>\n<li><a href=\"#%EC%9D%BD%EC%96%B4%EB%B3%B8-%EA%B8%80%EB%93%A4-%EC%A4%91%EC%97%90-%EB%8F%84%EC%9B%80%EC%9D%B4-%EB%90%90%EB%8D%98-%EA%B8%80%EB%93%A4\">읽어본 글들 중에 도움이 됐던 글들</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"SWR 사용해보기","date":"November 21, 2023","description":"SWR을 사용해봤습니다.","category":"FE","icon":"🧐"}},"previous":{"fields":{"slug":"/request-hook/"},"frontmatter":{"title":"react에서 api 요청 보내는 훅 만들어보기"}},"next":{"fields":{"slug":"/swr-pagination/"},"frontmatter":{"title":"날백수인 내가 SWR로 무한 스크롤(Infinite scroll)을 구현한 방법"}}},"pageContext":{"id":"44a4ab89-ff59-57d5-a414-aed307e86eda","previousPostId":"39e30c41-de96-52f6-a0d4-8e3117a47583","nextPostId":"e066ddcc-cf25-5691-afbb-d2a3cec1b88c"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}