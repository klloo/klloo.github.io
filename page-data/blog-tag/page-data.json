{"componentChunkName":"component---src-pages-blog-post-js","path":"/blog-tag/","result":{"data":{"site":{"siteMetadata":{"title":"klloo"}},"markdownRemark":{"id":"2a339a1d-b643-5aa8-b8fe-35614a8243e9","excerpt":"…","html":"<p>제 블로그는 원래 ... 카테고리를 하나로 두고 포스팅을 작성했었습니다. 그런데 카테고리를 하나로 두다보니...글의 분류를 딱 하나로 단정짓기가 은근 어려워서 태그의 개념으로 여러개의 분류를 달아두고 싶었습니다. <br/></p>\n<p>그래서 먼저 포스팅이 되는 마크다운 문서의 frontmatter를 아래와 같이 수정했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span>\n<span class=\"token front-matter yaml language-yaml\">title: Gatsby 블로그에 태그 만들기\ndate: '2024-01-11'\nicon: 🏷️\ndescription: '블로그에 태그를 추가했습니다.'\ntags:\n - Gatsby\n - Blog\n - JavaScript</span>\n<span class=\"token punctuation\">---</span></span></code></pre></div>\n<p>이런식으로 category를 제거하고, tags를 새로 추가했습니다. 여러 항목을 추가하기 위해서는 -로 구분하여 작성해주면 됩니다.</p>\n<p>이제 아래의 일들이 남았습니다.</p>\n<ol>\n<li>포스팅마다 태그 불러오기</li>\n<li>태그만 모아둔 페이지 만들기</li>\n<li>태그 별 페이지 만들기</li>\n</ol>\n<h3>포스팅마다 태그 불러오기</h3>\n<p>이건 그냥 GraphQL로 포스팅 관련 정보를 불러 올 때</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">  <span class=\"token property-query\">allMarkdownRemark</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">sort</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">frontmatter</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">date</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">DESC</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token object\">nodes</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property-query\">excerpt</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">pruneLength</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">truncate</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token object\">fields</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token property\">slug</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token object\">frontmatter</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token property-query\">date</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">formatString</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"MMMM DD, YYYY\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token property\">title</span>\n     <span class=\"token property\">description</span>\n     <span class=\"token property\">category</span>\n     <span class=\"token property\">icon</span>\n     <span class=\"token property\">tags</span>\n    <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 tags 필드만 추가해서 필요한 곳에서 배열의 형태로 사용하면 됩니다!</p>\n<h3>태그만 모아둔 페이지 만들기</h3>\n<p>이것도?! 별 거 아니었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pageQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n {\n  tags: allMarkdownRemark(limit: 2000) {\n   group(field: frontmatter___tags) {\n    fieldValue\n    totalCount\n   }\n  }\n }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>GraphQL로 태그 정보들을 가져와서 그냥... 페이지를 만들고 태그들을 보여주면 됩니다!</p>\n<h3>태그 별 페이지 만들기</h3>\n<p>마지막으로 각 태그 별로 어떤 포스팅이 있는지 보여주는 페이지들을 만들었습니다. 이 부분은 조금 별거였는데요..</p>\n<p>Gatsby는 정적 웹사이트 생성기이기 때문에 빌드 시점에 이미 모든 페이지들이 만들어져있어야 합니다. 하지만 태그 별로 페이지를 만들려면... 어떤 태그가 있는지도 알아야하고 그 태그마다 다른 페이지들이 있어야합니다.</p>\n<p>이 부분에 대해서는 'Gatsby 동적 라우팅' 키워드로 구글링을 해보니 참고할만한 내용들이 많았습니다. 각 태그별 페이지는 내용물은 다르지만 구조는 같기 때문에 하나의 템플릿을 만들고, 각 태그마다 다른 내용을 채워넣어주면 됩니다. 즉 태그 페이지 템플릿을 만들고 이 템플릿을 사용하여 동적 페이지를 만들어주면 됩니다. 이것을 createPages 메소드를 통해 구현을 했습니다.</p>\n<p>createPages는 gatsby-node.js파일에 작성해주면 됩니다. createPages는 동적 페이지를 생성하거나 데이터를 가져와 페이지를 만들 때 사용됩니다. 이 메소드 내에서 GraphQL을 사용하여 데이터를 쿼리하고, 가져온 데이터를 기반으로 동적 페이지를 생성할 수 있습니다. 이제보니 태그 뿐 아니라 포스팅 상세 페이지도 이런 방식으로 구현이 되어있었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\t<span class=\"token comment\">// 태그를 쿼리하여 각 태그별 페이지를 생성</span>\n\t<span class=\"token keyword\">const</span> tagResult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    query {\n      allMarkdownRemark {\n        edges {\n          node {\n            frontmatter {\n              tags\n            }\n          }\n        }\n      }\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n  <span class=\"token comment\">// 태그에 따라 페이지 생성</span>\n  tagResult<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/tags/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tag<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> tagTemplate<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">context</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> tag<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 태그를 먼저 쿼리해서 가져오고, 이 태그 별로 태그 템플릿을 사용해 페이지를 생성해줬습니다.\ncreatePage 함수의 context 매개변수는 페이지에 데이터를 전달하는 데 사용됩니다.</p>\n<p>태그 템플릿에서</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TagTemplate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">,</span> pageContext <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token operator\">...</span>\n <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> pageContext<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">...</span>\n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 pageContext를 props로 받아와 해당 태그를 받아올 수 있습니다! 저 태그로 이제 게시물을 불러와서 보여주기만하면 됩니다!</p>\n<p>이 부분 말고도 디자인...같은 부분들을 꽤나 많이 바꿨는데 이전보다 맘에 드는 것 같아 뿌듯합니다! 하하</p>","tableOfContents":"<ul>\n<li><a href=\"#%ED%8F%AC%EC%8A%A4%ED%8C%85%EB%A7%88%EB%8B%A4-%ED%83%9C%EA%B7%B8-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0\">포스팅마다 태그 불러오기</a></li>\n<li><a href=\"#%ED%83%9C%EA%B7%B8%EB%A7%8C-%EB%AA%A8%EC%95%84%EB%91%94-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0\">태그만 모아둔 페이지 만들기</a></li>\n<li><a href=\"#%ED%83%9C%EA%B7%B8-%EB%B3%84-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0\">태그 별 페이지 만들기</a></li>\n</ul>","frontmatter":{"title":"Gatsby 블로그에 태그 만들기","date":"January 11, 2024","description":"블로그에 태그를 추가했습니다.","category":"블로그","icon":"🏷️","tags":["Gatsby","Blog","JavaScript"]}},"previous":{"fields":{"slug":"/memoization-api/"},"frontmatter":{"title":"API 중복호출 해결하기"}},"next":{"fields":{"slug":"/react-xss/"},"frontmatter":{"title":"React가 XSS 공격을 방지하는 방법"}}},"pageContext":{"id":"2a339a1d-b643-5aa8-b8fe-35614a8243e9","previousPostId":"1c8caf3c-380e-518f-b680-e79b1a7068d4","nextPostId":"8e813377-82e2-5123-8078-15f5267e380c"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}