{"componentChunkName":"component---src-pages-blog-post-js","path":"/request-hook/","result":{"data":{"site":{"siteMetadata":{"title":"klloo"}},"markdownRemark":{"id":"39e30c41-de96-52f6-a0d4-8e3117a47583","excerpt":"프로젝트를 진행하다보면 서버로 api 요청을 보내는 로직을 많이 사용하게 됩니다. 그래서 이 부분을 편리하게 사용할 수 있도록 커스텀 훅을 만들어봤습니다. 이름은 useRequest라고 지어봤습니다. 내 프로젝트의 구조 설명 먼저 저는 통신 라이브러리로 axios…","html":"<p>프로젝트를 진행하다보면 서버로 api 요청을 보내는 로직을 많이 사용하게 됩니다. 그래서 이 부분을 편리하게 사용할 수 있도록 커스텀 훅을 만들어봤습니다.</p>\n<p>이름은 useRequest라고 지어봤습니다.</p>\n<h2>내 프로젝트의 구조 설명</h2>\n<p>먼저 저는 통신 라이브러리로 axios를 사용했습니다. 그리고 axios 요청을 보내는 Promise들을 따로 파일로 관리하고 있습니다.</p>\n<p>[사진]</p>\n<p>대충 이런 구조로 저장해뒀고 각 파일에는 이런식으로 axios 요청을 보내는 Promise를 반환하는 함수들이 선언되어 있습니다.</p>\n<p>[사진]</p>\n<p>그리고 api의 응답 형태는 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ResponseType</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n <span class=\"token literal-property property\">st</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n rs<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n err<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">desc</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>status는 상태값으로 요청 성공, 실패 값이 boolean값으로 반환되고 있으며 rs는 응답 데이터, err는 에러가 발생한 경우 에러 코드와 메시지를 전달해주는 객체입니다.</p>\n<p>그리고 딱히 응답 데이터가 없는 경우에는 rs가 생략되고 st값만 true로 응답이 오게 됩니다.</p>\n<p>이제 이런 구조에서 사용할 수 있는 axios 요청 커스텀 훅을 만들어 보려고 합니다.</p>\n<h2>useRequest</h2>\n<h3>처음의 생각</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> toast <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-toastify'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> useFetch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n axiosRequest<span class=\"token punctuation\">,</span> <span class=\"token comment\">// axios 함수</span>\n initialValue<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 데이터 초기 값</span>\n initialParams<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 데이터 초기 파라미터</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>params<span class=\"token punctuation\">,</span> setParams<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>axiosRequest<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">axiosRequest</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n     toast<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'데이터를 받아오지 못했습니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">;</span>\n    toast<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> fetchData<span class=\"token punctuation\">,</span> setParams<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// [데이터, 데이터 다시 요청, 파라미터 변겅해서 데이터 다시 요청]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useFetch<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이건 사실 이전에 진행했던 프로젝트의 코드인데요.. 이 프로젝트의 구조도 응답의 형태를 제외하면 위에서 설명한 내용과 같습니다!</p>\n<p>아무튼 맨 처음 커스텀 훅을 만들었을땐 다음과 같이 요청을 보내고, 데이터가 있다면 데이터를 담아온 다음 해당 데이터와 axios요청해서 다시 데이터를 받아오는 함수, 파라미터를 변경해서 데이터를 다시 받아오는 함수를 반환하도록 작성했었습니다.</p>\n<p>이렇게 구현을 하니 그냥 단순히 데이터를 받아오는 로직의 경우에는 매우 편리하게 사용할 수 있었습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>users<span class=\"token punctuation\">,</span> fetchUsers<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFetch</span><span class=\"token punctuation\">(</span>getAllUserLastLogin<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이런식으로 axios를 호출하는 Promise와 데이터의 초기값을 전달하여 users를 바로 받아오고, 데이터 갱신이 필요할 때는 fetchUsers를 호출하기만 하면되니 편리했습니다.</p>\n<p>이 때는 몰랐는데 나중에 보니 서버의 상태를 관리하는 라이브러리인 React-Query나 SWR을 사용하는 형태와 비슷하다고 생각이 들었습니다.</p>\n<p>아무튼 ... 그러다보니 이건 그냥 서버에서 받아오는 데이터의 상태를 관리하기에는 편하지만, 응답 데이터가 있는 경우에만 특화되어있어 post요청 등에서는 사용하지 못하고 따로 요청을 보내야하는 번거로움이 있었습니다. 또한 에러처리나 받아온 데이터를 가공할 필요가 있는 경우 등 추가적인 처리가 필요한 경우에는 오히려 더 귀찮은 작업을 해야하는 경우도 있었습니다.</p>\n<p>무엇보다 위에서도 언급했듯 비슷한 기능을 제공해주는 이미 잘 만들어진 라이브러리가 있는데 커스텀이 필요한 부분도 아니었고 굳이 허술하게 직접 만든 것을 사용할 이유도 없었을 뿐더러 애초에 저의 목적과는 다른 역할을 수행하고 있었기 때문에... 이런 형태는 api 요청을 보내는 공통된 로직을 처리하는 훅으로 사용하기에 좋지 않다고 판단을 했습니다.</p>\n<h3>개선</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> toast <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-toastify'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ResponseType <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'types/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CustomError <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'utils/error'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> useRequest <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n <span class=\"token function-variable function\">axiosRequest</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>params<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> ResponseType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// axios 함수</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">requestData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>params<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token function-variable function\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axiosRequest</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>st<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>st <span class=\"token keyword\">as</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">const</span> errorMessage <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>err<span class=\"token operator\">?.</span>desc <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">const</span> errorCode <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>err<span class=\"token operator\">?.</span>code <span class=\"token operator\">||</span> <span class=\"token string\">'err_default'</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomError</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">,</span> errorCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    toast<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'서비스에 오류가 발생하였습니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> requestData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useRequest<span class=\"token punctuation\">;</span></code></pre></div>\n<p>그래서 개선해본 내용은 위와 같습니다!\naxios 요청 Promise를 매개변수로 전달하면, 해당 함수로 요청을 보내고 응답의 상태값을 확인해서 에러 또는 응답 데이터를 보내주는 Promise를 반환하도록 해주었습니다. 또한 요청 자체를 실패했을 경우에는 일단은...서버에 문제가 발생하였다는 메시지를 띄워주는 것으로 에러처리를 해줬습니다. (공통 에러처리 어려워요 .. .)</p>\n<p>데이터를 받아오는 부분만 떼보면 이렇습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axiosRequest</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>st<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>st <span class=\"token keyword\">as</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> errorMessage <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>err<span class=\"token operator\">?.</span>desc <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> errorCode <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>err<span class=\"token operator\">?.</span>code <span class=\"token operator\">||</span> <span class=\"token string\">'err_default'</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomError</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">,</span> errorCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>먼저 요청에 성공한 경우(if(data.st)), 응답 데이터가 있다면 응답 데이터를 반환해주고, 응답 데이터가 없다면 요청 성공 여부를 반환해줍니다. 사실 이때는 무조건 true가 반환되긴 합니다...</p>\n<p>만약 그렇지 않다면(else) 응답으로 받은 에러로 커스텀 에러 객체를 생성하여 해당 에러를 발생시켜줍니다. 이렇게 해서 이 Promise를 호출한 곳에서 해당 에러를 적절히 처리할 수 있도록 해줬습니다. api마다 발생할 수 있는 에러들이 ..달랐기 때문입니다.</p>\n<h3>사용</h3>\n<p>post 요청의 경우는 아래와 같이 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> requestMovieInfo <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useRequest</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>requestMovie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> onClickRequestButton <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token function\">requestMovieInfo</span><span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    toast<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">'요청에 성공했습니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>어차피 resolve된 경우는 요청 성공한 경우 밖에 없으니 냅다.. 성공했다고 처리를 해줬습니다.</p>\n<p>get요청의 경우는 아래와 같이 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> requestUserInfo <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useRequest</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IUser<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>getMemberInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>userInfo<span class=\"token punctuation\">,</span> setUserInfo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">requestUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">setUserInfo</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>응답 상태를 확인하지 않아도 바로 data가 반환되기 때문에 위와 같이 사용할 수 있게 됩니다!</p>\n<p>완전히 간단하지는 않지만 ... 그래도 모든 요청마다 상태값을 확인하고, 공통된 에러를 매번 처리하는 방식보다는 한결 편리해진 것 같습니다!</p>\n<p>사실 이게 ... 잘 한 방법인지는 판단이 안서지만... 여러번 고민을 거쳤고 일단 저는 잘 사용했으니 된 것 아닐까요 하하^_^... 추후에 수정을 한다면 여기에 로딩 중을 나타낼 수 있는 변수나.. 이런걸 추가해도 좋겠다는 생각도 듭니다!</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%82%B4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%9D%98-%EA%B5%AC%EC%A1%B0-%EC%84%A4%EB%AA%85\">내 프로젝트의 구조 설명</a></p>\n</li>\n<li>\n<p><a href=\"#userequest\">useRequest</a></p>\n<ul>\n<li><a href=\"#%EC%B2%98%EC%9D%8C%EC%9D%98-%EC%83%9D%EA%B0%81\">처음의 생각</a></li>\n<li><a href=\"#%EA%B0%9C%EC%84%A0\">개선</a></li>\n<li><a href=\"#%EC%82%AC%EC%9A%A9\">사용</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"react에서 api요청 보내는 훅 만들어보기","date":"November 13, 2023","description":"useRequest라는 커스텀 훅을 만들어봤습니다","category":"프로젝트","icon":"☄️"}},"previous":{"fields":{"slug":"/router-access/"},"frontmatter":{"title":"react에서 라우터 접근 제한 구현하기"}},"next":null},"pageContext":{"id":"39e30c41-de96-52f6-a0d4-8e3117a47583","previousPostId":"93888e04-fcfa-56da-8dee-ce7a7d61dcb8","nextPostId":null}},"staticQueryHashes":["2841359383"],"slicesMap":{}}