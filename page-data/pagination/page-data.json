{"componentChunkName":"component---src-pages-blog-post-js","path":"/pagination/","result":{"data":{"site":{"siteMetadata":{"title":"klloo"}},"markdownRemark":{"id":"36b29581-d23e-593f-be19-fa032181e0bb","excerpt":"…","html":"<p>게시판 처럼 어떤 목록을 조회하는 형태의 화면에서 빠지면 허전한 요소가 있습니다.<br/>\n바로 페이지네이션 요소인데요 제가 말하는 페이지네이션 요소란 게시판하면 보편적으로 떠오르는 UI 하단에 보이는\n<code class=\"language-text\">&lt;  1 2 3 4 5 ></code>\n이렇게 생긴 클릭하여 페이지를 전환할 수 있는 요소를 의미합니다.</p>\n<p>페이징 기능은 다량의 데이터를 조회할 때 지금 당장 필요한 정보들만 조금씩 가져오기 때문에 사용자 경험에서도 그렇고, 시스템 성능 면에서도 꼭 필요한 기능입니다.</p>\n<p>제가 진행하는 프로젝트에서도 여기저기서 페이징 기능이 필요한 부분이 있어 공통으로 아래에 나타나는 페이지네이션 요소를 생성할 수 있는 컴포넌트를 한 번 만들어봤습니다.</p>\n<h2>생각 정리</h2>\n<p>먼저 저의 생각입니다. 일단 페이지 번호를 생성하려먼 전체 페이지 개수와 한 번에 보여줄 페이지 수가 필요합니다.\n여기서 한 번에 보여줄 페이지 수는 보통 페이지 번호를 보여줄 때, 1번부터 <code class=\"language-text\">1 2 3 ... 끝 페이지</code> 이렇게 보여주지 않고 <code class=\"language-text\">&lt;  1 2 3 4 5 ></code> <code class=\"language-text\">&lt;  6 7 8 9 10 ></code> 이런 식으로 일정한 개수로 잘라서 보여주게 되는데 이 때의 \"일정한 개수\"를 의미합니다.</p>\n<p>또 이 컴포넌트는 그냥 현재 보고 있는 페이지가 몇 페이지인지만 보여주고, 페이지는 이 컴포넌트를 사용하는 외부 컴포넌트에서 사용하면서 요청을 보내는 등 컨트롤을 할 것이기 때문에 .. page와 setPage도 받아와야 할 것 같습니다.</p>\n<p>그리고 이제 페이지 번호를 띄워주면 되는데 그러려면 내가 전달받은 페이지가 어떤 범위에 속해야하는지만 알면 됩니다. 이것을 계산하기 위해서는 그냥 현재 페이지와 가장 가까운 한 번에 보여줄 페이지의 배수를 앞뒤로 구해주면 될 것 같았습니다.</p>\n<p>만약 현재 페이지가 7, 한번에 보여줄 페이지 수가 5 라면 하단에는 6 7 8 9 10이 보여져야 합니다. 그래서 7의 앞뒤로 5의 배수를 구해주면 5와 10이 되므로 (5,10] 범위의 배열을 구해주면 될 것 같았습니다.</p>\n<p>자세히 살펴보자면</p>\n<ol>\n<li>페이지 덩어리 시작 번호</li>\n</ol>\n<ul>\n<li><code class=\"language-text\">Math.floor((page - 1) / limitPage) * limitPage + 1</code></li>\n<li><code class=\"language-text\">page</code>보다 작은 수 중에 <code class=\"language-text\">page</code>와 가장 가까운 <code class=\"language-text\">limitPage</code>의 배수 + 1을 구해줬습니다.</li>\n</ul>\n<ol start=\"2\">\n<li>페이지 덩어리 끝 번호</li>\n</ol>\n<ul>\n<li><code class=\"language-text\">Math.ceil(page / limitPage) * limitPage</code></li>\n<li><code class=\"language-text\">page</code>보다 큰 수 중에 <code class=\"language-text\">page</code>와 가장 가까운 <code class=\"language-text\">limitPage</code>의 배수를 구해줬습니다.</li>\n<li>만약 이 끝번호가 전체 페이지수보다 크다면 끝 번호는 전체 페이지 수가 되어야 합니다.</li>\n<li>즉 위의 경우에 페이지는 <code class=\"language-text\">limitPage</code>개가 아닌 <code class=\"language-text\">totalPage - start + 1</code>개가 생성이 되어야 합니다.</li>\n</ul>\n<p>이 두 가지를 구한 다음 시작번호 부터 끝 번호 까지 숫자 배열을 생성했습니다.<br/>\n그리고 이 숫자 배열을 하단에 띄워주면 하면 될 것 같습니다!</p>\n<p>어떤가요 나름 테스트를 해본다고 하긴 했는데요 ... 잘 되긴 했는데요 ... 이 논리에서 제가 혹시 생각을 못한 부분이 있을까요 ...? 있다면 알려주시면 감사하겠습니다 (--)(__)</p>\n<h2>코드</h2>\n<p>제가 작성한 페이지네이션 컴포넌트 전체 코드 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PaginationWrapper<span class=\"token punctuation\">,</span> PageButton<span class=\"token punctuation\">,</span> ButtonWrapper<span class=\"token punctuation\">,</span> PrevNextButton <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./style'</span><span class=\"token punctuation\">;</span>\n\ntype PaginationProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token literal-property property\">totalPage</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 전체 페이지 개수 (데이터 개수/한 페이지당 보여줄 데이터 개수)</span>\n <span class=\"token literal-property property\">limitPage</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 하단에 한 번에 보여줄 페이지 수</span>\n <span class=\"token literal-property property\">page</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 현재 페이지 번호</span>\n <span class=\"token literal-property property\">setPage</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>Dispatch<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>SetStateAction<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">>></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 현재 페이지 번호 set 함수</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 페이징 컴포넌트\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Pagination</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> totalPage<span class=\"token punctuation\">,</span> limitPage<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">,</span> setPage <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> PaginationProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>currentPageList<span class=\"token punctuation\">,</span> setCurrentPageList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState <span class=\"token operator\">&lt;</span> Array <span class=\"token operator\">&lt;</span> number <span class=\"token operator\">>></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>page <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> limitPage<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> limitPage <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>page <span class=\"token operator\">/</span> limitPage<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> limitPage<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> pageCount <span class=\"token operator\">=</span> limitPage<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>totalPage <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   pageCount <span class=\"token operator\">=</span> totalPage <span class=\"token operator\">-</span> start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setCurrentPageList</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> pageCount <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> i <span class=\"token operator\">+</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">,</span> limitPage<span class=\"token punctuation\">,</span> totalPage<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>PaginationWrapper<span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>PrevNextButton\n    disabled<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>page <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n    onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>page <span class=\"token operator\">!==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">setPage</span><span class=\"token punctuation\">(</span>page <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n   <span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'&lt; 이전'</span><span class=\"token punctuation\">}</span>\n   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>PrevNextButton<span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>ButtonWrapper<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>currentPageList<span class=\"token operator\">?.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n     <span class=\"token operator\">&lt;</span>PageButton key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPage</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> selected<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>page <span class=\"token operator\">===</span> i<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span>\n     <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>PageButton<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ButtonWrapper<span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>PrevNextButton\n    disabled<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>page <span class=\"token operator\">===</span> totalPage<span class=\"token punctuation\">}</span>\n    onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>page <span class=\"token operator\">!==</span> totalPage<span class=\"token punctuation\">)</span> <span class=\"token function\">setPage</span><span class=\"token punctuation\">(</span>page <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n   <span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'다음 >'</span><span class=\"token punctuation\">}</span>\n   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>PrevNextButton<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>PaginationWrapper<span class=\"token operator\">></span>\n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>꽤나..짧지요..?</p>\n<p>여기서 주의할 점은 이 컴포넌트의 <code class=\"language-text\">page</code>는 현재 보고 있는 페이지가 몇 페이지인지 보여주는 것이 주된 역할이기 때문에 <code class=\"language-text\">page</code>가 1번부터 설정이 됩니다.</p>\n<p>그래서 이 컴포넌트를 외부에서 사용할 때 예를들어 페이징 관련 api를 호출한다고 하면, 내가 호출하려는 api가 0번 페이지를 첫 페이지로 인식하는지, 1번 페이지를 첫페이지로 인식하는지에 따라 그냥 <code class=\"language-text\">page</code>를 사용하든 <code class=\"language-text\">page-1</code>로 요청을 전달하든 아무튼 주의해야합니다!! 저는 별로 주의 안했어서 하는 말 맞습니다!!</p>","tableOfContents":"<ul>\n<li><a href=\"#%EC%83%9D%EA%B0%81-%EC%A0%95%EB%A6%AC\">생각 정리</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C\">코드</a></li>\n</ul>","frontmatter":{"title":"페이지네이션(Pagination) 컴포넌트 구현하기","date":"September 28, 2023","description":"공통에서 사용할 수 있는 페이지네이션 컴포넌트를 만들어봤습니다.","category":"프로젝트","icon":"🧻","tags":["Project","React"]}},"previous":{"fields":{"slug":"/webpack-babel/"},"frontmatter":{"title":"Webpack과 Babel"}},"next":{"fields":{"slug":"/javascript-prototype/"},"frontmatter":{"title":"자바스크립트 팬이라면 꼭 퍼가..."}}},"pageContext":{"id":"36b29581-d23e-593f-be19-fa032181e0bb","previousPostId":"bcb2276e-579f-52a0-bd33-2c53d2e351bf","nextPostId":"5ddc2a84-2544-5089-a44c-7cbf84db9151"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}