{"componentChunkName":"component---src-pages-blog-post-js","path":"/csr-ssr/","result":{"data":{"site":{"siteMetadata":{"title":"klloo"}},"markdownRemark":{"id":"c6e1d8a1-e51a-55bb-8813-024c41300f28","excerpt":"평소 CSR과 SSR에 대해서 이름 그대로 CSR은 클라이언트에서 렌더링 되는거고 SSR은 서버에서 렌더링 되는거아냐? 이 정도로만 알고 있었기 때문에 ... 한 번 정리가 필요해보여 제대로 알아봤습니다. SPA와 MPA 알아보다보니 CSR과 SSR은 SPA, MPA…","html":"<p>평소 CSR과 SSR에 대해서 이름 그대로 CSR은 클라이언트에서 렌더링 되는거고 SSR은 서버에서 렌더링 되는거아냐?</p>\n<p>이 정도로만 알고 있었기 때문에 ... 한 번 정리가 필요해보여 제대로 알아봤습니다.</p>\n<h2>SPA와 MPA</h2>\n<p>알아보다보니 CSR과 SSR은 SPA, MPA와 밀접한 관련이 있는 것 같아 먼저 SPA와 MPA의 개념을 알아봤습니다.</p>\n<h3>SPA(Single Page Application)</h3>\n<p>하나의 페이지로 이루어진 애플리케이션입니다.\n하나의 페이지로만 구성되어 있어 CSR에 적합합니다.</p>\n<p>SPA는 웹 에플리케이션에 필요한 모든 정적 리소스를 최초 한 번에 다운로드하고, 이후 새로운 페이지 요청이 있을 때 페이지 갱신에 필요한 데이터만 전달 받아서 페이지를 갱신합니다. 그러니까, 한 페이지 안에서 새로운 페이지 요청 시 갱신이 필요한 부분만 갈아끼우는 방식이라고 볼 수 있습니다.</p>\n<p>우리 알고 있는 Vue, Angular, React 프레임워크로 만든 애플리케이션들이 대부분 여기에 속합니다.\n그렇다고 모든 SPA가 CSR을 사용하는 건 아닙니다.\nSSR을 사용하더라도 정적인 페이지 하나만 구성된 홈페이지라면 그것도 SPA라고 볼 수 있습니다.</p>\n<h3>MPA(Multiple Page Application)</h3>\n<p>여러 개의 페이지로 이루어진 애플리케이션으로 PHP나 JAVA가 여기에 속합니다.</p>\n<p>여러 개의 페이지로 구성되어 있으므로 보통 클라이언트에서 서버에 요청을 보내면 서버에서 렌더링하고 클라이언트에게 응답을 주는 방식인 SSR 환경을 사용합니다.</p>\n<p>MPA는 새로운 페이지를 요청할 때마다 전체 페이지를 다시 렌더링하게 됩니다.</p>\n<h2>CSR과 SSR</h2>\n<p>그러면 이제 CSR과 SSR에 대해 알아보겠습니다.</p>\n<h3>CSR (Client Side Rendering)</h3>\n<p>CSR 초기 로드 시 빈 HTML과 모든 로직이 담겨 있는 Javascript를 서버에서 넘겨 받습니다.\n그 후 빈 HTML에 Javascript를 이용하여 Dom을 동적으로 생성하여 그려 내게 됩니다.\n이렇게 클라이언트에서 렌더링한다고 하여 클라이언트 사이드 렌더링입니다. 위에서 설명한 SPA에 적합한 환경입니다.</p>\n<h4>장점</h4>\n<p>Javascript를 사용해서 동적으로 Dom을 그려내기 때문에 원하는 내용만 업데이트를 할 수 있습니다.\n예를 들어 링크 이동을 클릭했을 때 헤더, 푸터와 같이 중복되는 내용은 고정으로 두고 안에 콘텐츠만 업데이트하여 로드할 수 있습니다.</p>\n<p>또한 서버측에서 빈 HTML과 Javascript로직만 넘겨주기 때문에 서버 측 부하가 적습니다.</p>\n<h4>단점</h4>\n<p>HTML 파일을 하나만 받아와서 작동하다 보니 각각 페이지에 대한 정보를 담기 힘들어 SEO에 취약합니다.</p>\n<p>또한 첫 로드 시 모든 로직이 담겨있는 Javascript를 다운로드하다 보니 첫 진입 시 로딩 속도가 느립니다. (이후 구동 속도는 빠르다는 장점이 있습니다.)</p>\n<h3>SSR (Server Side Rendering)</h3>\n<p>SSR은 서버에서 렌더링하여 완성된 HTML 파일을 넘겨 받는 방식입니다.\n클라이언트에서 요청할 때마다 각 상황에 맞는 HTML 파일을 넘겨주기 때문에 페이지가 여러 가지일 수밖에 없습니다.\n그러므로 MPA 구동 방식과 밀접한 관계가 있습니다.</p>\n<h4>장점</h4>\n<p>클라이언트에서 요청한 페이지의 HTML을 다운로드하기 때문에 CSR보다 초기 진입 시 로딩이 빠릅니다.</p>\n<p>서버에서 렌더링 후 개별 페이지를 넘겨받는 것이므로 HTML 파일에 모든 정보가 포함되어 있기 때문에 SEO를 향상할 수 있습니다.</p>\n<h4>단점</h4>\n<p>링크 이동 시 새로운 HTML 파일 자체를 서버에서 받아오기 때문에 화면 깜빡임 현상이 있습니다.\n그래서 초기 진입은 CSR보다 빠를지 몰라도 페이지 이동은 SSR이 더 느린 편에 속합니다.</p>\n<p>그리고 SSR은 완성된 HTML을 Javascript 파일보다 먼저 받아오기 때문에 완성된 HTML로 화면은 확인되지만, Javascript 다운로드가 늦어진다면 기능이 동작하지 않는 경우가 있어 사용자 경험이 좋지 않을 수 있습니다.</p>\n<h3>SSG (Static Site Generator)</h3>\n<p>SSR 방식과 자주 언급되는 내용 중 하나라 추가로 알아봤습니다.</p>\n<p>정적 사이트 생성기로 번역할 수 있는 SSG(Static Site Generator)는 누가 접속하든 항상 동일한 내용을 보여주는 웹사이트를 만드는데 최적화된 방법입니다. 그래서 제품 카탈로그나 개인 블로그처럼 변경이 자주 일어나지 않는 비교적 소규모 웹사이트를 제작할 때 매우 유용합니다. 제 블로그도 SSG 중 하나인 Gatsby를 사용해서 제작했습니다ㅎㅎ</p>\n<p>SSR은 요청이 들어올 때마다 요청에 맞는 페이지를 렌더링하는 반면, SSG는 빌드할 때부터 페이지가 전부 렌더링 된 상태로 이미 완성된 페이지들이기 때문에 사용자가 이런저런 요청을 한다고 해도 서버에 미리 준비된 페이지들을 가져가는 것 외에는 할 수 있는 방법이 없습니다.</p>\n<p>따라서 내용물을 수정하기 힘들다는 단점이 있지만, SSR과 같이 서버에서 페이지가 렌더링해서 보내주기를 기다리지 않고, 필요한 페이지를 바로 가져올 수 있어 훨씬 간단하고 빠르다는 장점이 있습니다.</p>\n<h3>나의 의문점</h3>\n<p>어느정도 개념은 이해가 되었지만 CSR과 SSR의 핵심 키워드인 '렌더링'에 대한 의문점이 들었습니다.</p>\n<p>제가 알고 있던 렌더링이란, HTML 파일을 브라우저에 그려주는 과정으로 DOM Tree와 CSSOM Tree로 렌더링 트리를 만들고, 렌더링 트리를 사용해 각 노드를 화면에 그려주는 과정이었습니다.</p>\n<p>그런데 서버사이드에서 렌더링이 일어난다니 그러면 html을 받는 것이 아니라 렌더링 트리 같은 것을 받게 되는 건가? 하는 의문이 들었는데 이건 아무리 생각해도 말이 안돼서 ... 여기저기 찾아보다가 CRS와 SSR에서 말하는 렌더링이란 <strong>화면에 보여줄 완성된 HTML을 구성하는 과정</strong>이라고 이해를 했습니다.</p>\n<p>정확한 개념에 부합하지 않겠지만, 이해를 돕기 위해 예를 들어보자면</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 생긴 리액트 코드가 있을 때, CSR은 서버에서 빈 html과 data변수에 저장된 값을 div요소에 바인딩하라는 js코드를 넘겨 받고 클라이언트에서 빈 html에 js코드에 따라 내용을 채워넣는 방식이라면, <br/>\nSSR은 서버에서 이미 html 요소들과 데이터가 바인딩 되어 <code class=\"language-text\">&lt;div>1&lt;/div></code> 이렇게 생긴 완성된 html을 넘겨주는 방식이라고 이해를 했습니다.</p>\n<h2>정리</h2>\n<p>CSR과 SSR은 Rendering을 어디서 하는지의 차이이고, SPA와 MPA는 페이지를 여러 개를 사용하는지 한개를 사용하는지의 차이입니다.</p>\n<p>SPA는 서버로부터 처음에만 페이지를 받아오고 이후에는 동적으로 DOM을 구성하여 렌더링 되는 화면이 바뀌게 합니다.\n바로 여기서 “동적으로 DOM을 구성하여 렌더링 되는 화면이 바뀌게 합니다.” 부분이 CSR입니다.\n쉽게 말하자면 SPA는 처음에만 페이지를 받아오고 이후에는 받아오지 않는데 이럼에도 데이터가 수정되고 조회되게 하고 싶어서 CSR이란 “방식”을 채택한 것입니다.\n반대로 MPA는 동적이지 않은 페이지들을 상황에 맞게 클라이언트에 뿌려주기 때문에 SSR 방식을 채택한 것입니다.</p>\n<p>CSR과 SSR 중 어느 방식이 더 좋느냐는 서비스의 성격에 따라서 달라지게 됩니다.\n만약 사용자와의 상호작용이 많고 검색 엔진에 노출될 필요가 없는 페이지라면 CSR 방식이 적합할 것이고, 만약 회사 홈페이지의 경우 처럼 상위 노출될 필요가 있고, 모든 사용자에게 같은 내용을 보여줄 필요가 있는 페이지라면 SSR 방식이 적합할 것입니다.</p>\n<hr/>\n<br/>\n<p><strong>Reference</strong><br/>\n<a href=\"https://story.pxd.co.kr/1662\">https://story.pxd.co.kr/1662</a><br/>\n<a href=\"https://blog.the-compass.kr/csr-ssr-spa-mpa-ede7b55c5f6f\">https://blog.the-compass.kr/csr-ssr-spa-mpa-ede7b55c5f6f</a><br/>\n<a href=\"https://www.youtube.com/watch?v=YuqB8D6eCKE\">https://www.youtube.com/watch?v=YuqB8D6eCKE</a><br/>\n<a href=\"https://www.daleseo.com/spa-ssg-ssr/\">https://www.daleseo.com/spa-ssg-ssr/</a><br/></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#spa%EC%99%80-mpa\">SPA와 MPA</a></p>\n<ul>\n<li><a href=\"#spasingle-page-application\">SPA(Single Page Application)</a></li>\n<li><a href=\"#mpamultiple-page-application\">MPA(Multiple Page Application)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#csr%EA%B3%BC-ssr\">CSR과 SSR</a></p>\n<ul>\n<li>\n<p><a href=\"#csr-client-side-rendering\">CSR (Client Side Rendering)</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#ssr-server-side-rendering\">SSR (Server Side Rendering)</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90-1\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90-1\">단점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#ssg-static-site-generator\">SSG (Static Site Generator)</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%82%98%EC%9D%98-%EC%9D%98%EB%AC%B8%EC%A0%90\">나의 의문점</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></p>\n</li>\n</ul>","frontmatter":{"title":"CSR과 SSR","date":"September 12, 2023","description":"Client Side Rendering과 Server Side Rendering에 대해서 알아봤습니다.","category":"FE","icon":"📩"}},"previous":{"fields":{"slug":"/emotion-global/"},"frontmatter":{"title":"emotion으로 Global style 설정하기"}},"next":{"fields":{"slug":"/deploy/"},"frontmatter":{"title":"Spring Boot/React 웹 서비스 배포하기"}}},"pageContext":{"id":"c6e1d8a1-e51a-55bb-8813-024c41300f28","previousPostId":"6265d800-89b8-52a7-af4e-68c8478a23f2","nextPostId":"4d9d8f78-9ab5-528a-8fbf-892acff26925"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}