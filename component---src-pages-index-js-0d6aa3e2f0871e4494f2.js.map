{"version":3,"file":"component---src-pages-index-js-0d6aa3e2f0871e4494f2.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      {/* <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      /> */}\n      {/* {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> {author?.summary || null}\n          {` `}\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            You should follow them on Twitter\n          </a>\n        </p>\n      )} */}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title} &#x2728;</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title} &#x2728;\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">\n        <div>{header}</div>\n        <div>\n          \n        </div>\n      </header>\n      <hr/>\n      <main>{children}</main>\n      <footer>\n        {/* © {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a> */}\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import React, {useCallback, useEffect, useState} from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const allPosts = data.allMarkdownRemark.nodes\n  const categories = [{fieldValue: '전체보기', totalCount: allPosts.length}, ...data.categories.group]\n  let posts = [...allPosts];\n\n  const [curCategory, setCurCategory] = useState('전체보기');\n\n  const onClickCategory = useCallback((e)=> {\n    setCurCategory(e.target.value);\n  }, []);\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Bio />\n      {posts.length} 개의 글\n      <div>\n        {categories.map(category => (\n          <button key={category.fieldValue} onClick={onClickCategory}>{category.fieldValue} ({category.totalCount})</button>\n        ))}\n      </div>\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n    categories: allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___category) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`"],"names":["data","useStaticQuery","site","siteMetadata","author","social","className","location","title","children","isRootPath","pathname","header","Link","to","description","metaDescription","defaultTitle","name","content","property","twitter","siteTitle","allPosts","allMarkdownRemark","nodes","categories","fieldValue","totalCount","length","group","posts","curCategory","setCurCategory","useState","onClickCategory","useCallback","e","target","value","map","category","key","onClick","style","listStyle","post","frontmatter","fields","slug","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","excerpt","Head"],"sourceRoot":""}