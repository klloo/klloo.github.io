{"version":3,"file":"component---src-pages-using-typescript-tsx-0bc73c13f40d07a8f0a7.js","mappings":"qNAaA,MA+BaA,EAA0B,IAAMC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAM,qBAExD,UAjCwDC,IAAA,IAAC,KACvDC,EAAI,KACJC,EAAI,SACJC,GACD,SACCN,EAAAA,cAACO,EAAAA,EAAM,CAACL,MAAM,mBAAmBI,SAAUA,GACzCN,EAAAA,cAAAA,KAAAA,KAAI,0CACJA,EAAAA,cAAAA,IAAAA,KAAG,4CACwC,4BAAM,YAAe,0CAClC,4BAAM,YAAe,qCACzC,4BAAM,oBAAuB,MAEvCA,EAAAA,cAAAA,IAAAA,KAAG,4CACwC,0BAAI,cAAe,oBACxD,0BAAI,cAAe,gBAAa,0BAAI,YAAa,UAEvDA,EAAAA,cAAAA,IAAAA,KAAG,kCAC8BK,EAAK,uBAAqB,IACxDD,EAAKI,KAAKC,UAAU,KAEvBT,EAAAA,cAAAA,IAAAA,KAAG,kCAC+B,IAChCA,EAAAA,cAAAA,IAAAA,CAAGU,KAAK,yEAAwE,kCAE5E,KAGNV,EAAAA,cAACW,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACN,C,+CCYX,IAjDe,IAAoC,IAAnC,SAAEN,EAAQ,MAAEJ,EAAK,SAAEW,GAAU,EAC3C,MACMC,EAD6B,MAChBR,EAASS,SAC5B,IAAIC,EAgBJ,OAbEA,EADEF,EAEA,sBAAIG,UAAU,gBACZ,gBAAC,EAAAN,KAAI,CAACC,GAAG,KAAKV,EAAM,OAKtB,gBAAC,EAAAS,KAAI,CAACM,UAAU,mBAAmBL,GAAG,KACnCV,EAAM,MAMX,2BACE,0BAAQe,UAAU,iBAChB,2BAAMD,GACN,2BAAK,UAEP,uBAAKC,UAAU,iBAAiB,oBAAmBH,GAUjD,4BAAOD,GACP,2BAAK,2BAAK,4BAEZ,0BAAQI,UAAU,iBAChB,2BACA,2BAAK,MACA,IAAIC,MAAOC,cAAc,eAC5B,IACA,qBAAGT,KAAK,4BAA2B,WAEnC,C,+CCLV,IAlCY,IAAuC,IAAD,MAArC,YAAEU,EAAW,MAAElB,EAAK,SAAEW,GAAU,EAC3C,MAAM,KAAEL,IAASa,EAAAA,EAAAA,gBAAe,cAgB1BC,EAAkBF,GAAeZ,EAAKe,aAAaH,YACnB,QAApB,EAAGZ,EAAKe,oBAAY,OAAjB,EAAmBrB,MAExC,OACE,gCACE,6BAAQA,EAAM,KACd,wBAAMsB,KAAK,2BAA2BC,QAAQ,gDAC9C,wBAAMD,KAAK,cAAcC,QAASH,IAClC,wBAAMI,SAAS,WAAWD,QAASvB,IACnC,wBAAMwB,SAAS,iBAAiBD,QAASH,IACzC,wBAAMI,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YACjCZ,EACA,C","sources":["webpack://gatsby-starter-blog/./src/pages/using-typescript.tsx","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{\" \"}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title} &#x2728;</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title} &#x2728;\n      </Link>\n    )\n  }\n\n  return (\n    <div>\n      <header className=\"global-header\">\n        <div>{header}</div>\n        <div>about</div>\n      </header>\n      <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n        {/* {isRootPath && <div className=\"banner-wrapper\">\n          <StaticImage \n            className=\"banner-image\"\n            layout=\"fixed\"\n            formats={[\"auto\", \"webp\", \"avif\"]}\n            src=\"../images/banner1.png\"\n            alt=\"banner-img\"\n            />\n        </div>} */}\n        <main>{children}</main>\n        <br/><br/><br/>\n      </div>\n      <footer className=\"global-footer\">\n        <hr/>\n        <br/>\n          Â© {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{title} </title>\n      <meta name=\"google-site-verification\" content=\"G2a8iASYaLpR88psrhVEz2g0p4IgIihncfRi8gKFrNg\" />\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["Head","React","Seo","title","_ref","data","path","location","Layout","site","buildTime","href","Link","to","children","isRootPath","pathname","header","className","Date","getFullYear","description","useStaticQuery","metaDescription","siteMetadata","name","content","property"],"sourceRoot":""}