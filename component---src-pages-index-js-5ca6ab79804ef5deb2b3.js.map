{"version":3,"file":"component---src-pages-index-js-5ca6ab79804ef5deb2b3.js","mappings":"uJAyDA,IA9CY,KAAO,IAAD,IAChB,MAAMA,GAAOC,EAAAA,EAAAA,gBAAe,cAiBS,QAAzB,EAAGD,EAAKE,KAAKC,oBAAY,OAAtB,EAAwBC,OACF,QAAzB,EAAGJ,EAAKE,KAAKC,oBAAY,OAAtB,EAAwBE,OAEvC,OACE,uBAAKC,UAAU,OAoBT,C,iIC2BV,UAzEkB,IAAyB,IAAD,MAAvB,KAAEN,EAAI,SAAEO,GAAU,EACnC,MAAMC,GAAkC,QAAtB,EAAAR,EAAKE,KAAKC,oBAAY,aAAtB,EAAwBM,QAAK,QACzCC,EAAWV,EAAKW,kBAAkBC,MAClCC,EAAU,CAAI,CAACC,WAAY,OAAQC,WAAYL,EAASM,SAAO,eAAKhB,EAAKa,WAAWI,SAEpF,EAACC,EAAM,EAACC,IAAYC,EAAAA,EAAAA,WAAS,OAAIV,KACjC,EAACW,EAAY,EAACC,IAAkBF,EAAAA,EAAAA,UAAS,QAEzCG,GAAkBC,EAAAA,EAAAA,cAAaC,IACnCH,EAAeG,EAAEC,OAAOC,UAAU,GACjC,IASH,OAPAC,EAAAA,EAAAA,YAAU,KAENT,EADkB,SAAhBE,GACO,OAAIX,IAEJ,OAAIA,EAASmB,QAAQC,GAAOA,EAAKC,YAAYC,WAAaX,KAAc,GAClF,CAACA,IAGF,gBAAC,IAAM,CAACd,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAG,MACJ,uBAAKF,UAAU,eACZO,EAAWoB,KAAID,GACd,uBACE1B,UAAWe,IAAcW,EAASlB,WAAa,sBAAuB,aACtEoB,IAAKF,EAASlB,WACdqB,QAASZ,GAERS,EAASlB,eAIhB,2BACE,0BAAKO,GACL,4BAAOH,EAAMF,OAAO,UAEtB,uBAAKV,UAAU,eAAe8B,MAAO,CAAEC,UAAU,SAC9CnB,EAAMe,KAAIH,IACT,MAAMrB,EAAQqB,EAAKC,YAAYtB,OAASqB,EAAKQ,OAAOC,KAEpD,OACE,uBAAKjC,UAAU,YAAY4B,IAAKJ,EAAKQ,OAAOC,MAC1C,2BACEjC,UAAU,iBACVkC,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAI,CAACC,GAAIb,EAAKQ,OAAOC,KAAMK,SAAS,OACnC,wBAAMA,SAAS,YAAYnC,KAG/B,6BAAQqB,EAAKC,YAAYc,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQjB,EAAKC,YAAYiB,aAAelB,EAAKmB,SAE/CL,SAAS,kBAIX,KAIL,EAWN,MAAMM,EAAO,IAAM,gBAAC,IAAG,CAACzC,MAAM,e","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      {/* <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      /> */}\n      {/* {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> {author?.summary || null}\n          {` `}\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            You should follow them on Twitter\n          </a>\n        </p>\n      )} */}\n    </div>\n  )\n}\n\nexport default Bio\n","import React, {useCallback, useEffect, useState} from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const allPosts = data.allMarkdownRemark.nodes\n  const categories = [{fieldValue: '전체보기', totalCount: allPosts.length}, ...data.categories.group]\n\n  const [posts, setPosts] = useState([...allPosts]);\n  const [curCategory, setCurCategory] = useState('전체보기');\n\n  const onClickCategory = useCallback((e)=> {\n    setCurCategory(e.target.innerText);\n  }, []);\n\n  useEffect(() => {\n    if (curCategory === '전체보기')\n      setPosts([...allPosts])\n    else\n      setPosts([...allPosts.filter((post)=>post.frontmatter.category === curCategory)])\n  }, [curCategory]);\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Bio />\n      <div className=\"tag-wrapper\">\n        {categories.map(category => (\n          <div\n            className={curCategory===category.fieldValue ? \"tag-button selected\": \"tag-button\"}\n            key={category.fieldValue}\n            onClick={onClickCategory}\n          >\n            {category.fieldValue}\n          </div>\n        ))}\n      </div>\n      <div>\n        <h4>{curCategory}</h4>\n        <span>{posts.length} 개의 글</span>\n      </div>\n      <div className=\"post-wrapper\" style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <div className=\"post-item\" key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </div>\n          )\n        })}\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"Huiy's Blog\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          category\n        }\n      }\n    }\n    categories: allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___category) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`"],"names":["data","useStaticQuery","site","siteMetadata","author","social","className","location","siteTitle","title","allPosts","allMarkdownRemark","nodes","categories","fieldValue","totalCount","length","group","posts","setPosts","useState","curCategory","setCurCategory","onClickCategory","useCallback","e","target","innerText","useEffect","filter","post","frontmatter","category","map","key","onClick","style","listStyle","fields","slug","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt","Head"],"sourceRoot":""}